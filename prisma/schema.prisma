// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String    @id @default(uuid())
  phone     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  profiles  Profile[]
  sessions  Session[]

  @@map("accounts")
}

model Session {
  id        String   @id @default(uuid())
  accountId String   @map("account_id")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Profile {
  id         String      @id @default(uuid())
  accountId  String      @map("account_id")
  name       String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  account    Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  recommends Recommend[]

  @@map("profiles")
}

model Recommend {
  id        String   @id @default(uuid())
  profileId String   @map("profile_id")
  movieId   String   @map("movie_id")
  createdAt DateTime @default(now()) @map("created_at")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, movieId])
  @@map("recommends")
}
